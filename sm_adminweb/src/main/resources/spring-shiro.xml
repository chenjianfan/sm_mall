<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd">
	<!-- 启用shrio授权注解拦截方式 -->
	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
<!-- 	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		Shiro的核心安全接口,这个属性是必须的
		<property name="securityManager" ref="securityManager" />
		要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.html"页面
		<property name="loginUrl" value="/login.html" />
		登录成功后要跳转的连接
		<property name="successUrl" value="/index.html" />
		用户访问未对其授权的资源时,所显示的连接
		若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp
		<property name="unauthorizedUrl" value="/" />
		Shiro连接约束配置,即过滤链的定义
		此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839
		下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的
		anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种
		authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter
		<property name="filterChainDefinitions">
			<value>
				/statics/**=anon
				/api/**=anon
				/api/**=noSessionCreation
				/login.html=anon
				/sys/login=anon
				/captcha.jpg=anon
				/**=authc
			</value>
		</property>
	</bean>

	配置缓存管理器
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		指定 ehcache 的配置文件
		<property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml" />
	</bean>
	配置进行授权和认证的 Realm
	<bean id="myRealm" class="com.gray.base.shiro.ShiroDbRealm">
		<property name="userService" ref="userService" />
	</bean>
	<bean id="userService" class="com.gray.user.service.impl.UserServiceImpl" />
	配置 Shiro 的 SecurityManager Bean.
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="cacheManager" ref="cacheManager" />
		<property name="realm" ref="myRealm" />
		<property name="sessionMode" value="native">
		</property>
	</bean>
	配置 Bean 后置处理器: 会自动的调用和 Spring 整合后各个组件的生命周期方法.
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" /> -->
</beans>  